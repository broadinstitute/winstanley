{
  parserClass="winstanley.parser.WdlParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Wdl"
  psiImplClassSuffix="Impl"
  psiPackage="winstanley.psi"
  psiImplPackage="winstanley.psi.impl"

  elementTypeHolderClass="winstanley.psi.WdlTypes"
  elementTypeClass="winstanley.psi.WdlElementType"
  tokenTypeClass="winstanley.psi.WdlTokenType"
}

// Regenerate from IntelliJ using Grammar-Kit plugin and COMMAND-SHIFT-G

wdlFile ::= import_stmt* (task_block|workflow_block|COMMENT)*

import_stmt ::= IMPORT string_literal import_namespace?
import_namespace ::= AS IDENTIFIER

workflow_block ::= WORKFLOW WORKFLOW_IDENTIFIER_DECL LBRACE wf_body_element* RBRACE
wf_body_element ::= call_block | declaration | while_loop | if_stmt | scatter_block | wf_outputs
call_block ::= CALL fqn alias? LBRACE call_body RBRACE
call_body ::= declaration* call_input*
call_input ::= INPUT COLON (mapping (COMMA mapping)*)?
mapping ::= IDENTIFIER EQUAL expression
alias ::= AS IDENTIFIER
wf_outputs ::= OUTPUT LBRACE wf_output* RBRACE
wf_output ::= fqn wf_output_wildcard?
wf_output_wildcard ::= DOT ASTERISK

while_loop ::= WHILE LPAREN expression RPAREN LBRACE wf_body_element* RBRACE
if_stmt ::= IF LPAREN expression RPAREN LBRACE wf_body_element* RBRACE
scatter_block ::= SCATTER LPAREN IDENTIFIER IN expression RPAREN LBRACE wf_body_element* RBRACE

task_block ::= TASK TASK_IDENTIFIER_DECL LBRACE declaration* sections* RBRACE
sections ::= command_block|task_outputs|runtime_block|parameter_meta_block|meta_block

command_block ::= COMMAND COMMAND_DELIMITER_OPEN (COMMAND_CHAR|command_var)* COMMAND_DELIMITER_CLOSE
command_var ::= COMMAND_VAR_OPENER command_var_option? expression RBRACE
command_var_option ::= SEP EQUAL expression // TODO: There's more of these!!?

task_outputs ::= OUTPUT LBRACE output_kv* RBRACE
output_kv ::= type_e IDENTIFIER EQUAL expression
runtime_block ::= RUNTIME map
parameter_meta_block ::= PARAMETER_META map
meta_block ::= META map

declaration ::= type_e postfix_quantifier? IDENTIFIER setter?
setter ::= EQUAL expression
postfix_quantifier ::= QMARK | PLUS

map ::= LBRACE kv* RBRACE
kv ::= IDENTIFIER COLON expression
type_e ::= TYPE (LSQUARE type_e (COMMA type_e)* RSQUARE)?

string_literal ::= QUOTE (QUOTE_STRING_CHAR|ESCAPE_SEQUENCE)* QUOTE

expression ::= ( function_call | array_or_map_lookup | member_access | object_literal | map_literal | array_literal | value |
                 LPAREN expression RPAREN | LOGICAL_NOT expression | PLUS expression | DASH expression
               ) expression_dash?
expression_dash ::= infix_operator expression
infix_operator ::= DOUBLE_PIPE | DOUBLE_AMPERSAND | DOUBLE_EQUAL | NOT_EQUAL | LESS_THAN | LESS_EQUAL | MORE_THAN |
                    MORE_EQUAL | PLUS | DASH | ASTERISK | SLASH | PERCENT
function_call ::= IDENTIFIER LPAREN (expression (COMMA expression)*)? RPAREN
array_or_map_lookup ::= IDENTIFIER LSQUARE expression RSQUARE
member_access ::= IDENTIFIER DOT IDENTIFIER
object_literal ::= OBJECT LBRACE object_kv (COMMA object_kv)* RBRACE
map_literal ::= LBRACE map_kv (COMMA map_kv)* RBRACE
array_literal ::= LSQUARE expression (COMMA expression)* RSQUARE

map_kv ::= expression COLON expression
object_kv ::= IDENTIFIER COLON expression
value ::= string_literal | IDENTIFIER | BOOLEAN | float_value | integer_value
float_value ::= NUMBER+ DOT NUMBER+
integer_value ::= NUMBER+

fqn ::= IDENTIFIER (DOT IDENTIFIER)*